package team14.model;

/**
 * Strategy class
 * @author mirafcry
 * @ver 11/24/14
 *
 */
public class Strategy {

	private String name, action, effect, description;
	private int price;
	
	/**
	 * Creates new Strategy
	 * @param name
	 * @param action
	 * @param effect
	 * @param description
	 * @param price
	 * @throws IllegalArgumentException if name, action, effect, and/or description is invalid and/or price is
	 * less than 0.
	 */
	public Strategy(String name, String action, String effect, String description, int price) {
		setName(name);
		setAction(action);
		setEffect(effect);
		setDescription(description);
		setPrice(price);
	}
	
	/**
	 * Returns name
	 * @return name
	 */
	public String getName() {
		return name;
	}
	
	/**
	 * Modifies the name of this Strategy
	 * @param name
	 */
	public void setName(String name) {
		if(name == null || name.length() == 0){
			throw new IllegalArgumentException("Please supply valid modifier.");
		}
		this.name = name;
	}
		
	/**
	 * Returns action
	 * @return action
	 */
	public String getAction() {
		return action;
	}
	
	/**
	 * Modifies the action for this Strategy
	 * @param action
	 */
	public void setAction(String action) {
		if(action == null || action.length() == 0) {
			throw new IllegalArgumentException("Please supply valid action.");
		}
		this.action = action;
	}

	/**
	 * Returns effect
	 * @return effect
	 */
	public String getEffect() {
		return effect;
	}
	
	/**
	 * Modifies effect for this Strategy
	 * @param effect
	 */
	public void setEffect(String effect) {
		if(effect == null || effect.length() == 0) {
			throw new IllegalArgumentException("Please supply valid effect.");
		}
		this.effect = effect;
	}
	
	/**
	 * Returns description
	 * @return description
	 */
	public String getDesciption() {
		return description;
	}
	
	/**
	 * Modifies description for this Strategy
	 * @param description
	 */
	public void setDescription(String description) {
		if(description == null || description.length() == 0) {
			throw new IllegalArgumentException("Please supply valid description.");
		}
		this.description = description;
	}

	/**
	 * Returns price
	 * @return price
	 */
	public int getPrice() {
		return price;
	}
	
	/**
	 * Modifies price for this Strategy
	 * @param price
	 */
	public void setPrice(int price) {
		if(price < 0) {
			throw new IllegalArgumentException("Please supply a price greater than or equal to 0.");
		}
		this.price = price;
	}
	
	
}
