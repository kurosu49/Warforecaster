package team14.view;

import javax.swing.JPanel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;

import java.awt.ScrollPane;

import javax.swing.JTabbedPane;

import java.awt.BorderLayout;
import java.awt.GridBagLayout;

import javax.swing.JTable;

import java.awt.GridBagConstraints;
import java.awt.Insets;

import javax.swing.border.SoftBevelBorder;
import javax.swing.border.BevelBorder;

import java.awt.GridLayout;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.border.EtchedBorder;

import team14.controller.WarForecasterDB;
import team14.model.ComboItem;
import team14.model.Equipment;
import team14.model.StSquad;
import team14.model.StStrategy;
import team14.model.StUnit;
import team14.model.Strategist;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JButton;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

@SuppressWarnings("serial")
public class UnitPanel extends JPanel {
	
	private GUI myGUI;
	
	private JComboBox comboBoxEquip;
	
	private JComboBox comboBoxStrategy;
	
	private JComboBox comboBoxSquad;
	
	private JTable tableUnits;
	
	private JTextPane textPaneDesc;
	
	private JButton btnSetup;
	
	private WarForecasterDB db;	
	
	private List<StUnit> list;
	private List<StSquad> squadlist;
	private List<StStrategy> stratlist;	
	private List<Equipment> equiplist;
	
	private StStrategy selectedStrat;
	private Equipment selectedEquip;
	private StSquad selectedSquad;
	
	private ComboItem itemNone;
	
	private Object[][] data;
	
	private Strategist strategist;
	
	public UnitPanel(GUI aGUI, Strategist aStrategist, WarForecasterDB adb) {	
		strategist = aStrategist;
		db = adb;
		myGUI = aGUI;
		
		buildUnitPanel();
	}
	
	private void buildUnitPanel() {
		
		setBorder(null);
		
		JTabbedPane tabbedPaneUnit = new JTabbedPane(JTabbedPane.TOP);
		
		JPanel panelUnitEditor = new JPanel();
		tabbedPaneUnit.addTab("<html><body leftmargin=15 topmargin=8 marginwidth=15 marginheight=5> Unit Editor </body></html>", null, panelUnitEditor, "Cabbage");

		JPanel panelSquadEditor = new JPanel();
		tabbedPaneUnit.addTab("<html><body leftmargin=15 topmargin=8 marginwidth=15 marginheight=5> Squad Editor </body></html>", null, panelSquadEditor, null);
		
		
		
		
	
		
		GridBagLayout gbl_panelUnitEditor = new GridBagLayout();
		gbl_panelUnitEditor.columnWidths = new int[]{300, 100, 0};
		gbl_panelUnitEditor.rowHeights = new int[]{0, 0};
		gbl_panelUnitEditor.columnWeights = new double[]{1.0, 1.0, Double.MIN_VALUE};
		gbl_panelUnitEditor.rowWeights = new double[]{1.0, Double.MIN_VALUE};
		panelUnitEditor.setLayout(gbl_panelUnitEditor);
		
		JScrollPane scrollPaneTable = new JScrollPane();
		GridBagConstraints gbc_scrollPaneTable = new GridBagConstraints();
		gbc_scrollPaneTable.insets = new Insets(0, 0, 0, 5);
		gbc_scrollPaneTable.fill = GridBagConstraints.BOTH;
		gbc_scrollPaneTable.gridx = 0;
		gbc_scrollPaneTable.gridy = 0;
		panelUnitEditor.add(scrollPaneTable, gbc_scrollPaneTable);
		
		
		// Test Data
		String[] columnNames = {"", "Name", "Class", "Rank", "HP", "Atk", "Def", "Spd", "","","","",};
			
		try
		{
			list = db.getStUnits(strategist.getID());
			
			data = new Object[list.size()][columnNames.length];
			for (int i=0; i<list.size(); i++) {
				data[i][0] = list.get(i).getID();
				data[i][1] = list.get(i).getName();
				data[i][2] = list.get(i).getUnitClass();
				data[i][3] = list.get(i).getRank();
				data[i][4] = list.get(i).getHP();
				data[i][5] = list.get(i).getAtk();
				data[i][6] = list.get(i).getDef();
				data[i][7] = list.get(i).getSpd();
				data[i][8] = list.get(i).getSquadID();
				data[i][9] = list.get(i).getEquipID();
				data[i][10] = list.get(i).getStratID();
				data[i][11] = list.get(i).getDescription();
				
			}
			
		} catch (SQLException e)
		{
			e.printStackTrace();
		}
		
		
		
		tableUnits = new JTable(data, columnNames);
		tableUnits.getColumnModel().getColumn(0).setMinWidth(0);
		tableUnits.getColumnModel().getColumn(0).setMaxWidth(0);
		tableUnits.getColumnModel().getColumn(8).setMinWidth(0);
		tableUnits.getColumnModel().getColumn(8).setMaxWidth(0);
		tableUnits.getColumnModel().getColumn(9).setMinWidth(0);
		tableUnits.getColumnModel().getColumn(9).setMaxWidth(0);
		tableUnits.getColumnModel().getColumn(10).setMinWidth(0);
		tableUnits.getColumnModel().getColumn(10).setMaxWidth(0);
		tableUnits.getColumnModel().getColumn(11).setMinWidth(0);
		tableUnits.getColumnModel().getColumn(11).setMaxWidth(0);
		scrollPaneTable.setViewportView(tableUnits);
		
		JPanel panelUnitStatus = new JPanel();
		panelUnitStatus.setBorder(new SoftBevelBorder(BevelBorder.RAISED, null, null, null, null));
		GridBagConstraints gbc_panelUnitStatus = new GridBagConstraints();
		gbc_panelUnitStatus.fill = GridBagConstraints.BOTH;
		gbc_panelUnitStatus.gridx = 1;
		gbc_panelUnitStatus.gridy = 0;
		panelUnitEditor.add(panelUnitStatus, gbc_panelUnitStatus);
		
		comboBoxEquip = new JComboBox();
		
		itemNone = new ComboItem("None", -1);
		
		try {
			equiplist = db.getGuildHallEquipment();
			comboBoxEquip.addItem(itemNone);
			for(Equipment e: equiplist) {
				comboBoxEquip.addItem(new ComboItem(e.getName(), e.getID()));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		comboBoxEquip.setSelectedIndex(-1);
		
		
		comboBoxStrategy = new JComboBox();
		try {
			stratlist = db.getStStrategyList(strategist.getID());
			comboBoxStrategy.addItem(itemNone);
			for(StStrategy st: stratlist) {
				comboBoxStrategy.addItem(new ComboItem(st.getName(), st.getID()));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		comboBoxStrategy.setSelectedIndex(-1);
		
		
		comboBoxSquad = new JComboBox();
		try {
			squadlist = db.getStSquadList(strategist.getID());;
			for(StSquad sq: squadlist) {
				comboBoxSquad.addItem(new ComboItem(sq.getName(), sq.getID()));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		comboBoxSquad.setSelectedIndex(-1);
		
		textPaneDesc = new JTextPane();
		textPaneDesc.setEditable(false);
		
		btnSetup = new JButton("Setup");
		btnSetup.setEnabled(false);
		
		// ACTIONS
		tableUnits.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				btnSetup.setEnabled(true);
				textPaneDesc.setText("" + tableUnits.getValueAt(tableUnits.getSelectedRow(), 11));
				
				try {
					int itemid1 = (int) tableUnits.getValueAt(tableUnits.getSelectedRow(), 9);
					if (itemid1 != 0 || selectedEquip != null) {
						selectedEquip = db.getEquipment(itemid1);
						ComboItem citem1 = new ComboItem(selectedEquip.getName(), selectedEquip.getID());
						comboBoxEquip.setSelectedItem(citem1);
					} else {
						comboBoxEquip.setSelectedItem(itemNone);
						selectedEquip = null;
					}
					
					
					int itemid2 = (int) tableUnits.getValueAt(tableUnits.getSelectedRow(), 10);
					if (itemid2 != 0 || selectedStrat != null) {
						selectedStrat = db.getStStrategy(strategist.getID(), itemid2);
						ComboItem citem2 = new ComboItem(selectedStrat.getName(), selectedStrat.getID());
						comboBoxStrategy.setSelectedItem(citem2);
					} else {
						comboBoxStrategy.setSelectedItem(itemNone);
						selectedStrat = null;
					}
					
					int itemid3 = (int) tableUnits.getValueAt(tableUnits.getSelectedRow(), 8);
					if (itemid3 != 0 || selectedSquad != null) {
						selectedSquad = db.getStSquad(strategist.getID(), itemid3);
						ComboItem citem3 = new ComboItem(selectedSquad.getName(), selectedSquad.getID());
						comboBoxSquad.setSelectedItem(citem3);
					} else {
						comboBoxSquad.setSelectedItem(itemNone);
						selectedSquad = null;
					}
					
					comboBoxEquip.revalidate();
					comboBoxStrategy.revalidate();
					comboBoxSquad.revalidate();
					
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		
		comboBoxEquip.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Object item = comboBoxEquip.getSelectedItem();
				int id = ((ComboItem)item).getValue(); // ID
				try {
					if (id == -1)
						selectedEquip = null;
					else
						selectedEquip = db.getEquipment(id);
				
				} catch (SQLException e1) {
					e1.printStackTrace();
				}				
				
			}
		});
		
		comboBoxStrategy.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Object item = comboBoxStrategy.getSelectedItem();
				int id = ((ComboItem)item).getValue(); // ID
				try {
					if (id == -1)
						selectedStrat = null;
					else
						selectedStrat = db.getStStrategy(strategist.getID(), id);
				} catch (SQLException e1) {
					e1.printStackTrace();
				}

			}
		});
		
		comboBoxSquad.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Object item = comboBoxSquad.getSelectedItem();
				int id = ((ComboItem)item).getValue(); // ID
				try {
					if (id == -1)
						selectedSquad = null;
					else
						selectedSquad = db.getStSquad(strategist.getID(), id);
				} catch (SQLException e1) {
					e1.printStackTrace();
				}

			}
		});
		
		btnSetup.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			
				int stratid = -1;
				if (selectedStrat == null) stratid = -1;
				else stratid = selectedStrat.getID();
				
				int equipid = -1;
				if (selectedEquip == null) equipid = -1;
				else equipid = selectedEquip.getID();
				
				tableUnits.setValueAt(selectedSquad.getID(), tableUnits.getSelectedRow(), 8);
				tableUnits.setValueAt(selectedEquip.getID(), tableUnits.getSelectedRow(), 9);
				tableUnits.setValueAt(selectedStrat.getID(), tableUnits.getSelectedRow(), 10);
				
				comboBoxEquip.revalidate();
				comboBoxStrategy.revalidate();
				comboBoxSquad.revalidate();
				
				try {
					db.updateStUnits(strategist.getID(), (int) tableUnits.getValueAt(tableUnits.getSelectedRow(), 0), 
							selectedSquad.getID(), stratid, equipid);
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
		
		// LAYOUTS
		
		GroupLayout gl_panelUnitStatus = new GroupLayout(panelUnitStatus);
		gl_panelUnitStatus.setHorizontalGroup(
			gl_panelUnitStatus.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_panelUnitStatus.createSequentialGroup()
					.addGroup(gl_panelUnitStatus.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panelUnitStatus.createSequentialGroup()
							.addContainerGap()
							.addGroup(gl_panelUnitStatus.createParallelGroup(Alignment.TRAILING)
								.addComponent(comboBoxEquip, Alignment.LEADING, 0, 171, Short.MAX_VALUE)
								.addComponent(comboBoxStrategy, Alignment.LEADING, 0, 171, Short.MAX_VALUE)
								.addComponent(comboBoxSquad, 0, 171, Short.MAX_VALUE)))
						.addGroup(gl_panelUnitStatus.createSequentialGroup()
							.addContainerGap()
							.addGroup(gl_panelUnitStatus.createParallelGroup(Alignment.LEADING)
								.addComponent(btnSetup, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
								.addComponent(textPaneDesc, GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))))
					.addContainerGap())
		);
		gl_panelUnitStatus.setVerticalGroup(
			gl_panelUnitStatus.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_panelUnitStatus.createSequentialGroup()
					.addContainerGap(72, Short.MAX_VALUE)
					.addComponent(comboBoxEquip, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(comboBoxStrategy, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(comboBoxSquad, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(textPaneDesc, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(btnSetup)
					.addGap(7))
		);
		panelUnitStatus.setLayout(gl_panelUnitStatus);
		
		GroupLayout groupLayout = new GroupLayout(this);
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(groupLayout.createSequentialGroup()
					.addContainerGap()
					.addComponent(tabbedPaneUnit, GroupLayout.PREFERRED_SIZE, 561, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.TRAILING)
				.addGroup(groupLayout.createSequentialGroup()
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					.addComponent(tabbedPaneUnit, GroupLayout.PREFERRED_SIZE, 326, GroupLayout.PREFERRED_SIZE)
					.addContainerGap())
		);
		setLayout(groupLayout);
	}
}
